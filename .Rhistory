# Hello, I'm a comment. Nice to meet you.
# You can recognize me by the "#" which is at the begin of the line
# If you execute me, nothing will happen
# So, do that just press control + enter on this line
# Also you can sum up new comments putting the # at the begin
# you can do that selecting something and pressing control + shift + c
# try this key combination on the line 8 and welcome to the scripts : )
print("Hello world")
############################ Operations  ############################
3 + 4                       # sum!
pi                          # built in pi value
pi_plus_five = pi + 5       # storing the result
pi_plus_five                # looking at the result
(pi_plus_five = pi + 3)     # storing and looking at the result
print(paste("the result is ", pi))
a = 1 # alternative to the <-, use it only for asign values
b = 2 # or in functions like  rnorm(mean = 3, n = 100)
c(a, b) # c is concatenate
my_numbers <- c(1, 2, 3, 46)
(my_numbers <- my_numbers + c(3, 1, 4, 1))
my_numbers * 3
mean(my_numbers)
my_mean <- mean(my_numbers)
print(paste("My mean is", my_mean))
text = "text!"
number = 1
(vector <- c(number, 3))
(vector_mixed <- c(number, text))
vector[1]
vector[2]
vector[1:2]
as.numeric(vector)
str(vector[1:2])
as.numeric(vector_mixed) # Does the best he can, but... see warning!
# most common structure is data.frame
data(USArrests) 			# example included in base R
class(USArrests)
str(USArrests)
head(USArrests) 			# cheack the first lines
# USArrests
USArrests[1 , 2] 			# first row, second column
USArrests[, c(1,2)]			# first two columns
USArrests[,c("Murder", "Assault")]	# Murder and assault
USArrests[[2]]				# the second column
USArrests[, "Murder"]  			# Murder column
USArrests[["Murder"]] 			# Murder column
USArrests$Murder			# Murder column
if (TRUE) {
print("hello!")
}
mean(c(1, 2, 3, 4, 5, 6, 7, 8), trim = 0.2)
mean(c(1, 2, 3, 4, NA), na.rm = TRUE)
?mean
vector <- c(1,2,4,5,6)
if (is.na(mean(vector) )) {
print("something went wrong, NA included")
}
vector <- c(1,2,4,5,6, NA)
if (is.na(mean(vector) )) {
print("something went wrong, NA included")
}
mean
mean(vector, na.rm = TRUE)
mean.na <- function(x){
# returns mean of a vector with NA
x <- mean(x, na.rm = TRUE)
return(x)
}
u <- c(1,2,3,4,NA)
my_mean <- mean.na(u)
my_mean
############################ Here starts our template  ############################
rm(list=ls());gc()
if (!require('pacman')) install.packages('pacman'); library('pacman')
p_load(yarrr)
# pacman is a meta-package. It helps us to manage our packages
# usually we use install.packages("pacman") and then library(pacman).
# in this trick, we check if pacman is installed, if not, install it
# then load it with library() and use the function p_load from pacman to install
# and load the required packages. More info:
?p_load
p_load("yarrr")
if (!require('pacman')) install.packages('pacman'); library('pacman')
p_load( parallel, lattice, doBy, lme4, influence.ME , effects, lsmeans, reshape2, ez, arm, MASS, dplyr, ggplot2, psych, car , afex)
#### Script for learning to make some Linear mixed effects models ####
# First we clean the enviroment and load some packages
rm(list=ls());gc()
if (!require('pacman')) install.packages('pacman'); library('pacman')
p_load(dplyr, yarrr, Rmisc, afex, MASS, psych, lsmeans, knitr, effects)
options(scipen=20)
# Data taken and MODIFIED
df <- read.csv("./data/dvf_data.csv")
df %>% head
str(df)
df$style <- as.factor(df$style)
df$sex <- as.factor(df$sex)
df$hemifield <- as.factor(df$hemifield)
df$rt.c <- df$rt - mean(df$rt)
contrasts(df$style)
contrasts(df$sex)
contrasts(df$hemifield)
contrasts(df$style) <- c(.5, -.5)
contrasts(df$sex)  <- c(.5, -.5)
contrasts(df$hemifield) <- c(.5, -.5)
contrasts(df$hemifield)
contrasts(df$sex)
table(df$part , df$hemifield)
table(df$part , df$style)
table(df$part , df$sex)
table(df$stim, df$hemifield)
table(df$stim, df$style)
table(df$stim, df$sex)
#load("./data/models.Rdata")
m.rt.1 <- lmer(rt ~ hemifield * style * sex + (hemifield * style | part) +
(hemifield+sex |stim), data = df)
m.rt.1 %>% summary
m.rt.2 <- lmer(rt ~ hemifield * style * sex + (hemifield * style | part) +
(sex |stim), data = df)
m.rt.2 %>% summary
m.rt.2 %>% allEffects %>% plot
p_load(dplyr, yarrr, Rmisc, afex, MASS, psych, emmeans, knitr, effects)
m.response <- mixed(response ~ hemifield * style * sex + (hemifield * style | part) +
(hemifield*sex |stim),
data = df,
family = binomial(), method = "LRT", expand_re = TRUE)
load("./data/models.Rdata")
m.rt.1 %>% summary
m.rt.2 <- lmer(rt ~ hemifield * style * sex + (hemifield * style | part) +
(sex |stim), data = df)
emmeans::emmeans(m.rt.2, "style", type = "response")
emmeans::emmeans(m.rt.2, "hemifield", type = "response")
# Test over pairs of lsmeans
test(pairs(emmeans::emmeans(m.rt.2, "hemifield", by = "style")), by = NULL, adjust = "holm")
?emmeans
em.style <- emmeans::emmeans(m.rt.2, "style", type = "response")
plot(em.style)
plot(em.hemi)
em.hemi <- emmeans::emmeans(m.rt.2, "hemifield", type = "response")
plot(em.hemi)
pairs(em.style)
pairs.style <- pairs(em.style)
pairs.style
# Test over pairs of lsmeans
test(pairs(lsmeans::lsmeans(m.rt.2, "hemifield", by = "style")), by = NULL, adjust = "holm")
plot(pairs.style)
plot(pairs.style, comparissons = TRUE)
em.int <- emmeans(m.rt.2, c("hemifield", "style"), type = "response" )
em.int
plot(em.int)
em.int <- emmeans(m.rt.2, c("hemifield", "style"), type = "response", adjust = "holm")
em.int
plot(em.int)
pairs.int <- pairs(em.int)
pairs.int
plot(pairs.int)
plot(pairs.int, comparisons = TRUE)
plot(em.int)
(pairs.int)
plot(pairs.int)
